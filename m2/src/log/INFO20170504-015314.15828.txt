Log file created at: 2017/05/04 01:53:14
Running on machine: CSZ220
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0504 01:53:14.368826 17144 caffe.cpp:218] Using GPUs 0
I0504 01:53:14.543328 17144 caffe.cpp:223] GPU 0: GeForce GTX 1070
I0504 01:53:14.823827 17144 solver.cpp:48] Initializing solver from parameters: 
test_iter: 1000
test_interval: 100
base_lr: 0.001
display: 50
max_iter: 40000
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.0005
stepsize: 2500
snapshot: 50
snapshot_prefix: "../caffe_model/snapshot/model_transfer"
solver_mode: GPU
device_id: 0
net: "../caffe_model/train_val.prototxt"
train_state {
  level: 0
  stage: ""
}
I0504 01:53:14.825827 17144 solver.cpp:91] Creating training net from net file: ../caffe_model/train_val.prototxt
I0504 01:53:14.826328 17144 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I0504 01:53:14.826328 17144 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0504 01:53:14.826328 17144 net.cpp:58] Initializing net from parameters: 
name: "CaffeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "../data/mean.binaryproto"
  }
  data_param {
    source: "../data/train_lmdb"
    batch_size: 256
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8-cats-dogs"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8-cats-dogs"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8-cats-dogs"
  bottom: "label"
  top: "loss"
}
I0504 01:53:14.840327 17144 layer_factory.hpp:77] Creating layer data
I0504 01:53:14.840327 17144 net.cpp:100] Creating Layer data
I0504 01:53:14.840826 17144 net.cpp:408] data -> data
I0504 01:53:14.840826 17144 net.cpp:408] data -> label
I0504 01:53:14.840826 17144 data_transformer.cpp:25] Loading mean file from: ../data/mean.binaryproto
I0504 01:53:14.841827 14848 db_lmdb.cpp:40] Opened lmdb ../data/train_lmdb
I0504 01:53:14.900331 17144 data_layer.cpp:41] output data size: 256,3,227,227
I0504 01:53:15.089777 17144 net.cpp:150] Setting up data
I0504 01:53:15.090278 17144 net.cpp:157] Top shape: 256 3 227 227 (39574272)
I0504 01:53:15.090781 17144 net.cpp:157] Top shape: 256 (256)
I0504 01:53:15.090781 17144 net.cpp:165] Memory required for data: 158298112
I0504 01:53:15.090781 17144 layer_factory.hpp:77] Creating layer conv1
I0504 01:53:15.091279 17144 net.cpp:100] Creating Layer conv1
I0504 01:53:15.091279 17144 net.cpp:434] conv1 <- data
I0504 01:53:15.091279 17144 net.cpp:408] conv1 -> conv1
I0504 01:53:15.448307 17144 net.cpp:150] Setting up conv1
I0504 01:53:15.448806 17144 net.cpp:157] Top shape: 256 96 55 55 (74342400)
I0504 01:53:15.448806 17144 net.cpp:165] Memory required for data: 455667712
I0504 01:53:15.448806 17144 layer_factory.hpp:77] Creating layer relu1
I0504 01:53:15.448806 17144 net.cpp:100] Creating Layer relu1
I0504 01:53:15.449306 17144 net.cpp:434] relu1 <- conv1
I0504 01:53:15.449306 17144 net.cpp:395] relu1 -> conv1 (in-place)
I0504 01:53:15.449306 17144 net.cpp:150] Setting up relu1
I0504 01:53:15.449806 17144 net.cpp:157] Top shape: 256 96 55 55 (74342400)
I0504 01:53:15.449806 17144 net.cpp:165] Memory required for data: 753037312
I0504 01:53:15.449806 17144 layer_factory.hpp:77] Creating layer pool1
I0504 01:53:15.449806 17144 net.cpp:100] Creating Layer pool1
I0504 01:53:15.449806 17144 net.cpp:434] pool1 <- conv1
I0504 01:53:15.449806 17144 net.cpp:408] pool1 -> pool1
I0504 01:53:15.450305 17144 net.cpp:150] Setting up pool1
I0504 01:53:15.450305 17144 net.cpp:157] Top shape: 256 96 27 27 (17915904)
I0504 01:53:15.450305 17144 net.cpp:165] Memory required for data: 824700928
I0504 01:53:15.450305 17144 layer_factory.hpp:77] Creating layer norm1
I0504 01:53:15.450305 17144 net.cpp:100] Creating Layer norm1
I0504 01:53:15.450305 17144 net.cpp:434] norm1 <- pool1
I0504 01:53:15.450808 17144 net.cpp:408] norm1 -> norm1
I0504 01:53:15.451306 17144 net.cpp:150] Setting up norm1
I0504 01:53:15.451306 17144 net.cpp:157] Top shape: 256 96 27 27 (17915904)
I0504 01:53:15.451306 17144 net.cpp:165] Memory required for data: 896364544
I0504 01:53:15.451306 17144 layer_factory.hpp:77] Creating layer conv2
I0504 01:53:15.451306 17144 net.cpp:100] Creating Layer conv2
I0504 01:53:15.451807 17144 net.cpp:434] conv2 <- norm1
I0504 01:53:15.451807 17144 net.cpp:408] conv2 -> conv2
I0504 01:53:15.456306 17144 net.cpp:150] Setting up conv2
I0504 01:53:15.456806 17144 net.cpp:157] Top shape: 256 256 27 27 (47775744)
I0504 01:53:15.456806 17144 net.cpp:165] Memory required for data: 1087467520
I0504 01:53:15.456806 17144 layer_factory.hpp:77] Creating layer relu2
I0504 01:53:15.456806 17144 net.cpp:100] Creating Layer relu2
I0504 01:53:15.457305 17144 net.cpp:434] relu2 <- conv2
I0504 01:53:15.457305 17144 net.cpp:395] relu2 -> conv2 (in-place)
I0504 01:53:15.457806 17144 net.cpp:150] Setting up relu2
I0504 01:53:15.458806 17144 net.cpp:157] Top shape: 256 256 27 27 (47775744)
I0504 01:53:15.458806 17144 net.cpp:165] Memory required for data: 1278570496
I0504 01:53:15.458806 17144 layer_factory.hpp:77] Creating layer pool2
I0504 01:53:15.458806 17144 net.cpp:100] Creating Layer pool2
I0504 01:53:15.458806 17144 net.cpp:434] pool2 <- conv2
I0504 01:53:15.458806 17144 net.cpp:408] pool2 -> pool2
I0504 01:53:15.459306 17144 net.cpp:150] Setting up pool2
I0504 01:53:15.459306 17144 net.cpp:157] Top shape: 256 256 13 13 (11075584)
I0504 01:53:15.459306 17144 net.cpp:165] Memory required for data: 1322872832
I0504 01:53:15.459306 17144 layer_factory.hpp:77] Creating layer norm2
I0504 01:53:15.459806 17144 net.cpp:100] Creating Layer norm2
I0504 01:53:15.459806 17144 net.cpp:434] norm2 <- pool2
I0504 01:53:15.459806 17144 net.cpp:408] norm2 -> norm2
I0504 01:53:15.460305 17144 net.cpp:150] Setting up norm2
I0504 01:53:15.460305 17144 net.cpp:157] Top shape: 256 256 13 13 (11075584)
I0504 01:53:15.460305 17144 net.cpp:165] Memory required for data: 1367175168
I0504 01:53:15.460305 17144 layer_factory.hpp:77] Creating layer conv3
I0504 01:53:15.460808 17144 net.cpp:100] Creating Layer conv3
I0504 01:53:15.460808 17144 net.cpp:434] conv3 <- norm2
I0504 01:53:15.461099 17144 net.cpp:408] conv3 -> conv3
I0504 01:53:15.472133 17144 net.cpp:150] Setting up conv3
I0504 01:53:15.472133 17144 net.cpp:157] Top shape: 256 384 13 13 (16613376)
I0504 01:53:15.472133 17144 net.cpp:165] Memory required for data: 1433628672
I0504 01:53:15.472602 17144 layer_factory.hpp:77] Creating layer relu3
I0504 01:53:15.472602 17144 net.cpp:100] Creating Layer relu3
I0504 01:53:15.472602 17144 net.cpp:434] relu3 <- conv3
I0504 01:53:15.472602 17144 net.cpp:395] relu3 -> conv3 (in-place)
I0504 01:53:15.473103 17144 net.cpp:150] Setting up relu3
I0504 01:53:15.473103 17144 net.cpp:157] Top shape: 256 384 13 13 (16613376)
I0504 01:53:15.473103 17144 net.cpp:165] Memory required for data: 1500082176
I0504 01:53:15.473604 17144 layer_factory.hpp:77] Creating layer conv4
I0504 01:53:15.473604 17144 net.cpp:100] Creating Layer conv4
I0504 01:53:15.473604 17144 net.cpp:434] conv4 <- conv3
I0504 01:53:15.474104 17144 net.cpp:408] conv4 -> conv4
I0504 01:53:15.483103 17144 net.cpp:150] Setting up conv4
I0504 01:53:15.483604 17144 net.cpp:157] Top shape: 256 384 13 13 (16613376)
I0504 01:53:15.483604 17144 net.cpp:165] Memory required for data: 1566535680
I0504 01:53:15.483604 17144 layer_factory.hpp:77] Creating layer relu4
I0504 01:53:15.484104 17144 net.cpp:100] Creating Layer relu4
I0504 01:53:15.484603 17144 net.cpp:434] relu4 <- conv4
I0504 01:53:15.484603 17144 net.cpp:395] relu4 -> conv4 (in-place)
I0504 01:53:15.485102 17144 net.cpp:150] Setting up relu4
I0504 01:53:15.485102 17144 net.cpp:157] Top shape: 256 384 13 13 (16613376)
I0504 01:53:15.485102 17144 net.cpp:165] Memory required for data: 1632989184
I0504 01:53:15.485102 17144 layer_factory.hpp:77] Creating layer conv5
I0504 01:53:15.485604 17144 net.cpp:100] Creating Layer conv5
I0504 01:53:15.485604 17144 net.cpp:434] conv5 <- conv4
I0504 01:53:15.485604 17144 net.cpp:408] conv5 -> conv5
I0504 01:53:15.492105 17144 net.cpp:150] Setting up conv5
I0504 01:53:15.492105 17144 net.cpp:157] Top shape: 256 256 13 13 (11075584)
I0504 01:53:15.492605 17144 net.cpp:165] Memory required for data: 1677291520
I0504 01:53:15.492605 17144 layer_factory.hpp:77] Creating layer relu5
I0504 01:53:15.492605 17144 net.cpp:100] Creating Layer relu5
I0504 01:53:15.492605 17144 net.cpp:434] relu5 <- conv5
I0504 01:53:15.493103 17144 net.cpp:395] relu5 -> conv5 (in-place)
I0504 01:53:15.493103 17144 net.cpp:150] Setting up relu5
I0504 01:53:15.493103 17144 net.cpp:157] Top shape: 256 256 13 13 (11075584)
I0504 01:53:15.493103 17144 net.cpp:165] Memory required for data: 1721593856
I0504 01:53:15.493604 17144 layer_factory.hpp:77] Creating layer pool5
I0504 01:53:15.493604 17144 net.cpp:100] Creating Layer pool5
I0504 01:53:15.494102 17144 net.cpp:434] pool5 <- conv5
I0504 01:53:15.494102 17144 net.cpp:408] pool5 -> pool5
I0504 01:53:15.494102 17144 net.cpp:150] Setting up pool5
I0504 01:53:15.494102 17144 net.cpp:157] Top shape: 256 256 6 6 (2359296)
I0504 01:53:15.494602 17144 net.cpp:165] Memory required for data: 1731031040
I0504 01:53:15.495102 17144 layer_factory.hpp:77] Creating layer fc6
I0504 01:53:15.495102 17144 net.cpp:100] Creating Layer fc6
I0504 01:53:15.495102 17144 net.cpp:434] fc6 <- pool5
I0504 01:53:15.495102 17144 net.cpp:408] fc6 -> fc6
I0504 01:53:15.828627 17144 net.cpp:150] Setting up fc6
I0504 01:53:15.829602 17144 net.cpp:157] Top shape: 256 4096 (1048576)
I0504 01:53:15.830111 17144 net.cpp:165] Memory required for data: 1735225344
I0504 01:53:15.830603 17144 layer_factory.hpp:77] Creating layer relu6
I0504 01:53:15.831101 17144 net.cpp:100] Creating Layer relu6
I0504 01:53:15.831101 17144 net.cpp:434] relu6 <- fc6
I0504 01:53:15.831601 17144 net.cpp:395] relu6 -> fc6 (in-place)
I0504 01:53:15.832103 17144 net.cpp:150] Setting up relu6
I0504 01:53:15.832602 17144 net.cpp:157] Top shape: 256 4096 (1048576)
I0504 01:53:15.832602 17144 net.cpp:165] Memory required for data: 1739419648
I0504 01:53:15.832602 17144 layer_factory.hpp:77] Creating layer drop6
I0504 01:53:15.832602 17144 net.cpp:100] Creating Layer drop6
I0504 01:53:15.832602 17144 net.cpp:434] drop6 <- fc6
I0504 01:53:15.833103 17144 net.cpp:395] drop6 -> fc6 (in-place)
I0504 01:53:15.833103 17144 net.cpp:150] Setting up drop6
I0504 01:53:15.833103 17144 net.cpp:157] Top shape: 256 4096 (1048576)
I0504 01:53:15.833103 17144 net.cpp:165] Memory required for data: 1743613952
I0504 01:53:15.833103 17144 layer_factory.hpp:77] Creating layer fc7
I0504 01:53:15.833605 17144 net.cpp:100] Creating Layer fc7
I0504 01:53:15.833605 17144 net.cpp:434] fc7 <- fc6
I0504 01:53:15.833605 17144 net.cpp:408] fc7 -> fc7
I0504 01:53:15.980602 17144 net.cpp:150] Setting up fc7
I0504 01:53:15.981602 17144 net.cpp:157] Top shape: 256 4096 (1048576)
I0504 01:53:15.981602 17144 net.cpp:165] Memory required for data: 1747808256
I0504 01:53:15.981602 17144 layer_factory.hpp:77] Creating layer relu7
I0504 01:53:15.981602 17144 net.cpp:100] Creating Layer relu7
I0504 01:53:15.982101 17144 net.cpp:434] relu7 <- fc7
I0504 01:53:15.982101 17144 net.cpp:395] relu7 -> fc7 (in-place)
I0504 01:53:15.982101 17144 net.cpp:150] Setting up relu7
I0504 01:53:15.982602 17144 net.cpp:157] Top shape: 256 4096 (1048576)
I0504 01:53:15.982602 17144 net.cpp:165] Memory required for data: 1752002560
I0504 01:53:15.982602 17144 layer_factory.hpp:77] Creating layer drop7
I0504 01:53:15.983103 17144 net.cpp:100] Creating Layer drop7
I0504 01:53:15.983103 17144 net.cpp:434] drop7 <- fc7
I0504 01:53:15.983103 17144 net.cpp:395] drop7 -> fc7 (in-place)
I0504 01:53:15.983103 17144 net.cpp:150] Setting up drop7
I0504 01:53:15.983103 17144 net.cpp:157] Top shape: 256 4096 (1048576)
I0504 01:53:15.983103 17144 net.cpp:165] Memory required for data: 1756196864
I0504 01:53:15.983602 17144 layer_factory.hpp:77] Creating layer fc8-cats-dogs
I0504 01:53:15.983602 17144 net.cpp:100] Creating Layer fc8-cats-dogs
I0504 01:53:15.983602 17144 net.cpp:434] fc8-cats-dogs <- fc7
I0504 01:53:15.984103 17144 net.cpp:408] fc8-cats-dogs -> fc8-cats-dogs
I0504 01:53:15.985105 17144 net.cpp:150] Setting up fc8-cats-dogs
I0504 01:53:15.985105 17144 net.cpp:157] Top shape: 256 2 (512)
I0504 01:53:15.985105 17144 net.cpp:165] Memory required for data: 1756198912
I0504 01:53:15.985105 17144 layer_factory.hpp:77] Creating layer loss
I0504 01:53:15.985105 17144 net.cpp:100] Creating Layer loss
I0504 01:53:15.985602 17144 net.cpp:434] loss <- fc8-cats-dogs
I0504 01:53:15.985602 17144 net.cpp:434] loss <- label
I0504 01:53:15.985602 17144 net.cpp:408] loss -> loss
I0504 01:53:15.985602 17144 layer_factory.hpp:77] Creating layer loss
I0504 01:53:15.986102 17144 net.cpp:150] Setting up loss
I0504 01:53:15.986102 17144 net.cpp:157] Top shape: (1)
I0504 01:53:15.986102 17144 net.cpp:160]     with loss weight 1
I0504 01:53:15.986102 17144 net.cpp:165] Memory required for data: 1756198916
I0504 01:53:15.986102 17144 net.cpp:226] loss needs backward computation.
I0504 01:53:15.986102 17144 net.cpp:226] fc8-cats-dogs needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] drop7 needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] relu7 needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] fc7 needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] drop6 needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] relu6 needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] fc6 needs backward computation.
I0504 01:53:15.986601 17144 net.cpp:226] pool5 needs backward computation.
I0504 01:53:15.987102 17144 net.cpp:226] relu5 needs backward computation.
I0504 01:53:15.987102 17144 net.cpp:226] conv5 needs backward computation.
I0504 01:53:15.987102 17144 net.cpp:226] relu4 needs backward computation.
I0504 01:53:15.987102 17144 net.cpp:226] conv4 needs backward computation.
I0504 01:53:15.987102 17144 net.cpp:226] relu3 needs backward computation.
I0504 01:53:15.987102 17144 net.cpp:226] conv3 needs backward computation.
I0504 01:53:15.987603 17144 net.cpp:226] norm2 needs backward computation.
I0504 01:53:15.987603 17144 net.cpp:226] pool2 needs backward computation.
I0504 01:53:15.987603 17144 net.cpp:226] relu2 needs backward computation.
I0504 01:53:15.987603 17144 net.cpp:226] conv2 needs backward computation.
I0504 01:53:15.988102 17144 net.cpp:226] norm1 needs backward computation.
I0504 01:53:15.988102 17144 net.cpp:226] pool1 needs backward computation.
I0504 01:53:15.988102 17144 net.cpp:226] relu1 needs backward computation.
I0504 01:53:15.988102 17144 net.cpp:226] conv1 needs backward computation.
I0504 01:53:15.988603 17144 net.cpp:228] data does not need backward computation.
I0504 01:53:15.988603 17144 net.cpp:270] This network produces output loss
I0504 01:53:15.988603 17144 net.cpp:283] Network initialization done.
I0504 01:53:15.989102 17144 solver.cpp:181] Creating test net (#0) specified by net file: ../caffe_model/train_val.prototxt
I0504 01:53:15.989102 17144 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer data
I0504 01:53:15.989603 17144 net.cpp:58] Initializing net from parameters: 
name: "CaffeNet"
state {
  phase: TEST
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 227
    mean_file: "../data/mean.binaryproto"
  }
  data_param {
    source: "../data/train_lmdb"
    batch_size: 50
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8-cats-dogs"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8-cats-dogs"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8-cats-dogs"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8-cats-dogs"
  bottom: "label"
  top: "loss"
}
I0504 01:53:16.004103 17144 layer_factory.hpp:77] Creating layer data
I0504 01:53:16.004602 17144 net.cpp:100] Creating Layer data
I0504 01:53:16.004602 17144 net.cpp:408] data -> data
I0504 01:53:16.004602 17144 net.cpp:408] data -> label
I0504 01:53:16.004602 17144 data_transformer.cpp:25] Loading mean file from: ../data/mean.binaryproto
